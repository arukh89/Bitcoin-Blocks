const { createClient } = require('@supabase/supabase-js');

// Supabase credentials from .env
const supabaseUrl = 'https://masgfwpxfytraiwkvbmg.supabase.co';
const serviceRoleKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1hc2dmd3B4Znl0cmFpd2t2Ym1nIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc2MDY5NDk1NiwiZXhwIjoyMDc2MjcwOTU2fQ.fqzMqkFBZW9dydhH5yBCp35wdfQUT5clVYH-umfa1ZA';

const supabase = createClient(supabaseUrl, serviceRoleKey);

async function createMissingTables() {
    console.log('🚀 Creating missing tables...');
    
    try {
        // Check if tables exist first
        const { data: existingTables, error: tableError } = await supabase
            .from('information_schema.tables')
            .select('table_name')
            .eq('table_schema', 'public')
            .in('table_name', ['prize_configs', 'admin_fids', 'audit_logs']);
        
        if (tableError) {
            console.log('Cannot check table existence, proceeding with creation...');
        } else {
            const existingTableNames = existingTables?.map(t => t.table_name) || [];
            console.log('Existing tables:', existingTableNames);
        }
        
        // Create prize_configs table
        console.log('\nCreating prize_configs table...');
        try {
            const { data, error } = await supabase
                .from('prize_configs')
                .select('*')
                .limit(1);
            
            if (error && error.code === 'PGRST116') {
                // Table doesn't exist, create it using direct SQL
                console.log('Table prize_configs does not exist, creating...');
                
                const createResponse = await fetch(`${supabaseUrl}/rest/v1/`, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${serviceRoleKey}`,
                        'Content-Type': 'application/json',
                        'apikey': serviceRoleKey,
                        'Prefer': 'return=minimal'
                    },
                    body: JSON.stringify({
                        query: `
                            CREATE TABLE prize_configs (
                                id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                config_data JSONB NOT NULL,
                                updated_at BIGINT NOT NULL,
                                version BIGINT NOT NULL DEFAULT 1,
                                created_at BIGINT DEFAULT FLOOR(EXTRACT(EPOCH FROM NOW()) * 1000)
                            );
                            
                            COMMENT ON TABLE prize_configs IS 'Konfigurasi hadiah untuk game Bitcoin Blocks';
                        `
                    })
                });
                
                if (createResponse.ok) {
                    console.log('✅ prize_configs table created successfully');
                } else {
                    console.error('❌ Error creating prize_configs:', await createResponse.text());
                }
            } else {
                console.log('✅ prize_configs table already exists');
            }
        } catch (err) {
            console.error('Error checking prize_configs:', err);
        }
        
        // Create admin_fids table
        console.log('\nCreating admin_fids table...');
        try {
            const { data, error } = await supabase
                .from('admin_fids')
                .select('*')
                .limit(1);
            
            if (error && error.code === 'PGRST116') {
                console.log('Table admin_fids does not exist, creating...');
                
                const createResponse = await fetch(`${supabaseUrl}/rest/v1/`, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${serviceRoleKey}`,
                        'Content-Type': 'application/json',
                        'apikey': serviceRoleKey,
                        'Prefer': 'return=minimal'
                    },
                    body: JSON.stringify({
                        query: `
                            CREATE TABLE admin_fids (
                                fid TEXT PRIMARY KEY,
                                permissions JSONB NOT NULL DEFAULT '{}',
                                created_at BIGINT NOT NULL DEFAULT FLOOR(EXTRACT(EPOCH FROM NOW()) * 1000),
                                updated_at BIGINT NOT NULL DEFAULT FLOOR(EXTRACT(EPOCH FROM NOW()) * 1000)
                            );
                            
                            COMMENT ON TABLE admin_fids IS 'Daftar FID pengguna admin';
                        `
                    })
                });
                
                if (createResponse.ok) {
                    console.log('✅ admin_fids table created successfully');
                } else {
                    console.error('❌ Error creating admin_fids:', await createResponse.text());
                }
            } else {
                console.log('✅ admin_fids table already exists');
            }
        } catch (err) {
            console.error('Error checking admin_fids:', err);
        }
        
        // Create audit_logs table
        console.log('\nCreating audit_logs table...');
        try {
            const { data, error } = await supabase
                .from('audit_logs')
                .select('*')
                .limit(1);
            
            if (error && error.code === 'PGRST116') {
                console.log('Table audit_logs does not exist, creating...');
                
                const createResponse = await fetch(`${supabaseUrl}/rest/v1/`, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${serviceRoleKey}`,
                        'Content-Type': 'application/json',
                        'apikey': serviceRoleKey,
                        'Prefer': 'return=minimal'
                    },
                    body: JSON.stringify({
                        query: `
                            CREATE TABLE audit_logs (
                                id TEXT PRIMARY KEY DEFAULT (FLOOR(EXTRACT(EPOCH FROM NOW()) * 1000) || '-' || gen_random_uuid()::text),
                                admin_fid TEXT NOT NULL,
                                action TEXT NOT NULL,
                                details JSONB NOT NULL,
                                created_at BIGINT NOT NULL DEFAULT FLOOR(EXTRACT(EPOCH FROM NOW()) * 1000)
                            );
                            
                            COMMENT ON TABLE audit_logs IS 'Log aktivitas admin untuk audit trail';
                        `
                    })
                });
                
                if (createResponse.ok) {
                    console.log('✅ audit_logs table created successfully');
                } else {
                    console.error('❌ Error creating audit_logs:', await createResponse.text());
                }
            } else {
                console.log('✅ audit_logs table already exists');
            }
        } catch (err) {
            console.error('Error checking audit_logs:', err);
        }
        
        // Wait a bit for tables to be created
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // Insert default data
        console.log('\nInserting default data...');
        
        // Insert admin FIDs
        try {
            const { error: adminInsertError } = await supabase
                .from('admin_fids')
                .upsert([
                    {
                        fid: '250704',
                        permissions: { role: 'admin', permissions: ['all'], source: 'initial' },
                        created_at: Math.floor(Date.now() / 1000) * 1000,
                        updated_at: Math.floor(Date.now() / 1000) * 1000
                    },
                    {
                        fid: '1107084',
                        permissions: { role: 'admin', permissions: ['all'], source: 'initial' },
                        created_at: Math.floor(Date.now() / 1000) * 1000,
                        updated_at: Math.floor(Date.now() / 1000) * 1000
                    }
                ]);
                
            if (adminInsertError) {
                console.error('Error inserting admin FIDs:', adminInsertError);
            } else {
                console.log('✅ Admin FIDs inserted successfully');
            }
        } catch (err) {
            console.error('Error inserting admin FIDs:', err);
        }
        
        // Insert prize configuration
        try {
            const { error: prizeInsertError } = await supabase
                .from('prize_configs')
                .upsert([
                    {
                        config_data: {
                            jackpotAmount: '1000',
                            firstPlaceAmount: '500',
                            secondPlaceAmount: '250',
                            currencyType: 'USD',
                            tokenContractAddress: '0x0000000000000000000000000000000000000000'
                        },
                        updated_at: Math.floor(Date.now() / 1000) * 1000,
                        version: 1
                    }
                ]);
                
            if (prizeInsertError) {
                console.error('Error inserting prize config:', prizeInsertError);
            } else {
                console.log('✅ Prize configuration inserted successfully');
            }
        } catch (err) {
            console.error('Error inserting prize config:', err);
        }
        
        // Create indexes
        console.log('\nCreating indexes...');
        const indexes = [
            'CREATE INDEX IF NOT EXISTS idx_admin_fids_fid ON admin_fids(fid);',
            'CREATE INDEX IF NOT EXISTS idx_audit_logs_admin_fid ON audit_logs(admin_fid);',
            'CREATE INDEX IF NOT EXISTS idx_audit_logs_created_at ON audit_logs(created_at);',
            'CREATE INDEX IF NOT EXISTS idx_audit_logs_action ON audit_logs(action);',
            'CREATE INDEX IF NOT EXISTS idx_prize_configs_version ON prize_configs(version);',
            'CREATE INDEX IF NOT EXISTS idx_prize_configs_updated_at ON prize_configs(updated_at);'
        ];
        
        for (const indexSql of indexes) {
            try {
                const response = await fetch(`${supabaseUrl}/rest/v1/rpc/exec`, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${serviceRoleKey}`,
                        'Content-Type': 'application/json',
                        'apikey': serviceRoleKey
                    },
                    body: JSON.stringify({ sql: indexSql })
                });
                
                if (response.ok) {
                    console.log('✅ Index created successfully');
                } else {
                    console.log('ℹ️ Index may already exist or creation not needed');
                }
            } catch (err) {
                console.log('ℹ️ Index creation skipped');
            }
        }
        
        console.log('\n🎉 Table creation process completed!');
        
        // Verify tables were created
        console.log('\n🔍 Verifying table creation...');
        await verifyTables();
        
    } catch (error) {
        console.error('❌ Error in table creation process:', error);
    }
}

async function verifyTables() {
    const tables = ['prize_configs', 'admin_fids', 'audit_logs'];
    
    for (const tableName of tables) {
        try {
            const { data, error } = await supabase
                .from(tableName)
                .select('*')
                .limit(1);
            
            if (error) {
                console.log(`❌ Table ${tableName}: ${error.message}`);
            } else {
                console.log(`✅ Table ${tableName}: Exists and accessible`);
            }
        } catch (err) {
            console.log(`❌ Table ${tableName}: Error checking - ${err.message}`);
        }
    }
}

// Run the function
createMissingTables();