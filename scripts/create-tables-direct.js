const { Client } = require('pg')

async function createTablesWithDirectConnection() {
  console.log('🔧 Membuat tabel dengan koneksi PostgreSQL langsung...')
  console.log('Timestamp:', new Date().toISOString())

  const client = new Client({
    connectionString: 'postgresql://postgres:Sehati200989!@db.masgfwpxfytraiwkvbmg.supabase.co:5432/postgres',
    ssl: {
      rejectUnauthorized: false
    }
  })

  try {
    await client.connect()
    console.log('✅ Connected to PostgreSQL successfully')

    // 1. Create prize_configs table
    console.log('\n1. Membuat tabel prize_configs...')
    try {
      await client.query(`
        CREATE TABLE IF NOT EXISTS prize_configs (
          id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          config_data JSONB NOT NULL,
          updated_at BIGINT NOT NULL,
          version BIGINT NOT NULL DEFAULT 1,
          created_at BIGINT DEFAULT FLOOR(EXTRACT(EPOCH FROM NOW()) * 1000)
        )
      `)
      console.log('✅ Tabel prize_configs berhasil dibuat')
    } catch (err) {
      console.warn('⚠️ Error membuat prize_configs:', err.message)
    }

    // 2. Create admin_fids table
    console.log('\n2. Membuat tabel admin_fids...')
    try {
      await client.query(`
        CREATE TABLE IF NOT EXISTS admin_fids (
          fid TEXT PRIMARY KEY,
          permissions JSONB NOT NULL DEFAULT '{}',
          created_at BIGINT NOT NULL DEFAULT FLOOR(EXTRACT(EPOCH FROM NOW()) * 1000),
          updated_at BIGINT NOT NULL DEFAULT FLOOR(EXTRACT(EPOCH FROM NOW()) * 1000)
        )
      `)
      console.log('✅ Tabel admin_fids berhasil dibuat')
    } catch (err) {
      console.warn('⚠️ Error membuat admin_fids:', err.message)
    }

    // 3. Create audit_logs table
    console.log('\n3. Membuat tabel audit_logs...')
    try {
      await client.query(`
        CREATE TABLE IF NOT EXISTS audit_logs (
          id TEXT PRIMARY KEY DEFAULT (FLOOR(EXTRACT(EPOCH FROM NOW()) * 1000) || '-' || gen_random_uuid()::text),
          admin_fid TEXT NOT NULL,
          action TEXT NOT NULL,
          details JSONB NOT NULL,
          created_at BIGINT NOT NULL DEFAULT FLOOR(EXTRACT(EPOCH FROM NOW()) * 1000)
        )
      `)
      console.log('✅ Tabel audit_logs berhasil dibuat')
    } catch (err) {
      console.warn('⚠️ Error membuat audit_logs:', err.message)
    }

    // 4. Insert default admin FIDs
    console.log('\n4. Memasukkan data admin default...')
    try {
      await client.query(`
        INSERT INTO admin_fids (fid, permissions, created_at, updated_at) VALUES
        ('250704', '{"role": "admin", "permissions": ["all"], "source": "initial"}', FLOOR(EXTRACT(EPOCH FROM NOW()) * 1000), FLOOR(EXTRACT(EPOCH FROM NOW()) * 1000)),
        ('1107084', '{"role": "admin", "permissions": ["all"], "source": "initial"}', FLOOR(EXTRACT(EPOCH FROM NOW()) * 1000), FLOOR(EXTRACT(EPOCH FROM NOW()) * 1000))
        ON CONFLICT (fid) DO NOTHING
      `)
      console.log('✅ Admin FIDs berhasil dimasukkan')
    } catch (err) {
      console.warn('⚠️ Error insert admin FIDs:', err.message)
    }

    // 5. Insert default prize config
    console.log('\n5. Memasukkan prize config default...')
    try {
      await client.query(`
        INSERT INTO prize_configs (config_data, updated_at, version) VALUES
        ('{
          "jackpotAmount": "1000",
          "firstPlaceAmount": "500", 
          "secondPlaceAmount": "250",
          "currencyType": "USD",
          "tokenContractAddress": "0x0000000000000000000000000000000000000000"
        }', FLOOR(EXTRACT(EPOCH FROM NOW()) * 1000), 1)
        ON CONFLICT DO NOTHING
      `)
      console.log('✅ Prize config berhasil dimasukkan')
    } catch (err) {
      console.warn('⚠️ Error insert prize config:', err.message)
    }

    // 6. Create indexes
    console.log('\n6. Membuat indexes...')
    const indexes = [
      'CREATE INDEX IF NOT EXISTS idx_admin_fids_fid ON admin_fids(fid)',
      'CREATE INDEX IF NOT EXISTS idx_audit_logs_admin_fid ON audit_logs(admin_fid)',
      'CREATE INDEX IF NOT EXISTS idx_audit_logs_created_at ON audit_logs(created_at)',
      'CREATE INDEX IF NOT EXISTS idx_audit_logs_action ON audit_logs(action)',
      'CREATE INDEX IF NOT EXISTS idx_prize_configs_version ON prize_configs(version)',
      'CREATE INDEX IF NOT EXISTS idx_prize_configs_updated_at ON prize_configs(updated_at)'
    ]

    for (const indexSql of indexes) {
      try {
        await client.query(indexSql)
        console.log(`✅ Index created: ${indexSql.split('idx_')[1].split(' ')[0]}`)
      } catch (err) {
        console.warn(`⚠️ Index warning: ${err.message}`)
      }
    }

    // 7. Enable RLS
    console.log('\n7. Mengaktifkan RLS...')
    const rlsCommands = [
      'ALTER TABLE prize_configs ENABLE ROW LEVEL SECURITY',
      'ALTER TABLE admin_fids ENABLE ROW LEVEL SECURITY', 
      'ALTER TABLE audit_logs ENABLE ROW LEVEL SECURITY'
    ]

    for (const rlsSql of rlsCommands) {
      try {
        await client.query(rlsSql)
        console.log(`✅ RLS enabled for: ${rlsSql.split(' ')[2]}`)
      } catch (err) {
        console.warn(`⚠️ RLS warning: ${err.message}`)
      }
    }

    // 8. Verify tables
    console.log('\n8. Verifikasi tabel...')
    const tables = ['prize_configs', 'admin_fids', 'audit_logs']
    
    for (const table of tables) {
      try {
        const result = await client.query(`SELECT COUNT(*) as count FROM ${table}`)
        console.log(`✅ Table ${table}: ${result.rows[0].count} rows`)
      } catch (err) {
        console.error(`❌ Table ${table} verification failed:`, err.message)
      }
    }

    console.log('\n🎉 Semua tabel berhasil dibuat dan dikonfigurasi!')

  } catch (error) {
    console.error('❌ Error koneksi ke database:', error)
    throw error
  } finally {
    await client.end()
    console.log('✅ Database connection closed')
  }
}

// Jalankan pembuatan tabel
createTablesWithDirectConnection()
  .then(() => {
    console.log('\n✅ Proses pembuatan tabel selesai!')
  })
  .catch((error) => {
    console.error('\n❌ Proses pembuatan tabel gagal:', error)
    process.exit(1)
  })