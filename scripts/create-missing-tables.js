const { createClient } = require('@supabase/supabase-js');

// Supabase credentials
const supabaseUrl = 'https://masgfwpxfytraiwkvbmg.supabase.co';
const serviceRoleKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1hc2dmd3B4Znl0cmlhd2t2Ym1nIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTczNzQzMjQ2MCwiZXhwIjoyMDUzMDA4NDYwfQ.5eW72L4T1Q8q2p2rJ8R7F9JX9Y3Z6W8K7V2X1Q9Z2L4';

const supabase = createClient(supabaseUrl, serviceRoleKey);

async function createMissingTables() {
    console.log('üöÄ Creating missing tables...');
    
    try {
        // Create prize_configs table
        console.log('Creating prize_configs table...');
        const { error: prizeError } = await supabase.rpc('exec_sql', {
            sql: `
                CREATE TABLE IF NOT EXISTS prize_configs (
                    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    config_data JSONB NOT NULL,
                    updated_at BIGINT NOT NULL,
                    version BIGINT NOT NULL DEFAULT 1,
                    created_at BIGINT DEFAULT FLOOR(EXTRACT(EPOCH FROM NOW()) * 1000)
                );
                
                COMMENT ON TABLE prize_configs IS 'Konfigurasi hadiah untuk game Bitcoin Blocks';
            `
        });
        
        if (prizeError) {
            console.error('Error creating prize_configs:', prizeError);
        } else {
            console.log('‚úÖ prize_configs table created successfully');
        }
        
        // Create admin_fids table
        console.log('Creating admin_fids table...');
        const { error: adminError } = await supabase.rpc('exec_sql', {
            sql: `
                CREATE TABLE IF NOT EXISTS admin_fids (
                    fid TEXT PRIMARY KEY,
                    permissions JSONB NOT NULL DEFAULT '{}',
                    created_at BIGINT NOT NULL DEFAULT FLOOR(EXTRACT(EPOCH FROM NOW()) * 1000),
                    updated_at BIGINT NOT NULL DEFAULT FLOOR(EXTRACT(EPOCH FROM NOW()) * 1000)
                );
                
                COMMENT ON TABLE admin_fids IS 'Daftar FID pengguna admin';
            `
        });
        
        if (adminError) {
            console.error('Error creating admin_fids:', adminError);
        } else {
            console.log('‚úÖ admin_fids table created successfully');
        }
        
        // Create audit_logs table
        console.log('Creating audit_logs table...');
        const { error: auditError } = await supabase.rpc('exec_sql', {
            sql: `
                CREATE TABLE IF NOT EXISTS audit_logs (
                    id TEXT PRIMARY KEY DEFAULT (FLOOR(EXTRACT(EPOCH FROM NOW()) * 1000) || '-' || gen_random_uuid()::text),
                    admin_fid TEXT NOT NULL,
                    action TEXT NOT NULL,
                    details JSONB NOT NULL,
                    created_at BIGINT NOT NULL DEFAULT FLOOR(EXTRACT(EPOCH FROM NOW()) * 1000),
                    FOREIGN KEY (admin_fid) REFERENCES admin_fids(fid) ON DELETE SET NULL
                );
                
                COMMENT ON TABLE audit_logs IS 'Log aktivitas admin untuk audit trail';
            `
        });
        
        if (auditError) {
            console.error('Error creating audit_logs:', auditError);
        } else {
            console.log('‚úÖ audit_logs table created successfully');
        }
        
        // Create indexes
        console.log('Creating indexes...');
        const indexes = [
            'CREATE INDEX IF NOT EXISTS idx_admin_fids_fid ON admin_fids(fid);',
            'CREATE INDEX IF NOT EXISTS idx_audit_logs_admin_fid ON audit_logs(admin_fid);',
            'CREATE INDEX IF NOT EXISTS idx_audit_logs_created_at ON audit_logs(created_at);',
            'CREATE INDEX IF NOT EXISTS idx_audit_logs_action ON audit_logs(action);',
            'CREATE INDEX IF NOT EXISTS idx_prize_configs_version ON prize_configs(version);',
            'CREATE INDEX IF NOT EXISTS idx_prize_configs_updated_at ON prize_configs(updated_at);'
        ];
        
        for (const indexSql of indexes) {
            const { error: indexError } = await supabase.rpc('exec_sql', { sql: indexSql });
            if (indexError) {
                console.error('Error creating index:', indexError);
            } else {
                console.log('‚úÖ Index created successfully');
            }
        }
        
        // Insert default data
        console.log('Inserting default data...');
        
        // Insert admin FIDs
        const { error: adminInsertError } = await supabase
            .from('admin_fids')
            .upsert([
                {
                    fid: '250704',
                    permissions: { role: 'admin', permissions: ['all'], source: 'initial' },
                    created_at: Math.floor(Date.now() / 1000) * 1000,
                    updated_at: Math.floor(Date.now() / 1000) * 1000
                },
                {
                    fid: '1107084',
                    permissions: { role: 'admin', permissions: ['all'], source: 'initial' },
                    created_at: Math.floor(Date.now() / 1000) * 1000,
                    updated_at: Math.floor(Date.now() / 1000) * 1000
                }
            ]);
            
        if (adminInsertError) {
            console.error('Error inserting admin FIDs:', adminInsertError);
        } else {
            console.log('‚úÖ Admin FIDs inserted successfully');
        }
        
        // Insert prize configuration
        const { error: prizeInsertError } = await supabase
            .from('prize_configs')
            .upsert([
                {
                    config_data: {
                        jackpotAmount: '1000',
                        firstPlaceAmount: '500',
                        secondPlaceAmount: '250',
                        currencyType: 'USD',
                        tokenContractAddress: '0x0000000000000000000000000000000000000000'
                    },
                    updated_at: Math.floor(Date.now() / 1000) * 1000,
                    version: 1
                }
            ]);
            
        if (prizeInsertError) {
            console.error('Error inserting prize config:', prizeInsertError);
        } else {
            console.log('‚úÖ Prize configuration inserted successfully');
        }
        
        console.log('\nüéâ All missing tables created successfully!');
        
    } catch (error) {
        console.error('‚ùå Error creating tables:', error);
        
        // Try alternative approach using direct SQL
        console.log('\nüîÑ Trying alternative approach...');
        await tryAlternativeApproach();
    }
}

async function tryAlternativeApproach() {
    try {
        // Use direct SQL execution via REST API
        const sqlStatements = [
            `CREATE TABLE IF NOT EXISTS prize_configs (
                id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                config_data JSONB NOT NULL,
                updated_at BIGINT NOT NULL,
                version BIGINT NOT NULL DEFAULT 1,
                created_at BIGINT DEFAULT FLOOR(EXTRACT(EPOCH FROM NOW()) * 1000)
            );`,
            
            `CREATE TABLE IF NOT EXISTS admin_fids (
                fid TEXT PRIMARY KEY,
                permissions JSONB NOT NULL DEFAULT '{}',
                created_at BIGINT NOT NULL DEFAULT FLOOR(EXTRACT(EPOCH FROM NOW()) * 1000),
                updated_at BIGINT NOT NULL DEFAULT FLOOR(EXTRACT(EPOCH FROM NOW()) * 1000)
            );`,
            
            `CREATE TABLE IF NOT EXISTS audit_logs (
                id TEXT PRIMARY KEY DEFAULT (FLOOR(EXTRACT(EPOCH FROM NOW()) * 1000) || '-' || gen_random_uuid()::text),
                admin_fid TEXT NOT NULL,
                action TEXT NOT NULL,
                details JSONB NOT NULL,
                created_at BIGINT NOT NULL DEFAULT FLOOR(EXTRACT(EPOCH FROM NOW()) * 1000)
            );`
        ];
        
        for (const sql of sqlStatements) {
            const response = await fetch(`${supabaseUrl}/rest/v1/rpc/exec_sql`, {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${serviceRoleKey}`,
                    'Content-Type': 'application/json',
                    'apikey': serviceRoleKey
                },
                body: JSON.stringify({ sql })
            });
            
            if (response.ok) {
                console.log('‚úÖ SQL executed successfully');
            } else {
                console.error('‚ùå SQL execution failed:', await response.text());
            }
        }
        
    } catch (error) {
        console.error('‚ùå Alternative approach failed:', error);
    }
}

// Run the function
createMissingTables();