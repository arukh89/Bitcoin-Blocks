const { createClient } = require('@supabase/supabase-js')

// Kredensial Supabase
const SUPABASE_URL = 'https://masgfwpxfytraiwkvbmg.supabase.co'
const SUPABASE_SERVICE_ROLE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1hc2dmd3B4Znl0cmFpd2t2Ym1nIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc2MDY5NDk1NiwiZXhwIjoyMDc2MjcwOTU2fQ.fqzMqkFBZW9dydhH5yBCp35wdfQUT5clVYH-umfa1ZA'

const supabaseAdmin = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
})

async function fixMissingTables() {
  console.log('üîß Memperbaiki tabel yang hilang...')
  console.log('Timestamp:', new Date().toISOString())

  try {
    // 1. Create prize_configs table
    console.log('\n1. Membuat tabel prize_configs...')
    const { error: prizeConfigError } = await supabaseAdmin.rpc('exec_sql', {
      sql: `
        CREATE TABLE IF NOT EXISTS prize_configs (
          id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          config_data JSONB NOT NULL,
          updated_at BIGINT NOT NULL,
          version BIGINT NOT NULL DEFAULT 1,
          created_at BIGINT DEFAULT FLOOR(EXTRACT(EPOCH FROM NOW()) * 1000)
        );
      `
    })

    if (prizeConfigError && !prizeConfigError.message.includes('already exists')) {
      console.error('‚ùå Gagal membuat prize_configs:', prizeConfigError)
    } else {
      console.log('‚úÖ Tabel prize_configs berhasil dibuat')
    }

    // 2. Create admin_fids table
    console.log('\n2. Membuat tabel admin_fids...')
    const { error: adminFidsError } = await supabaseAdmin.rpc('exec_sql', {
      sql: `
        CREATE TABLE IF NOT EXISTS admin_fids (
          fid TEXT PRIMARY KEY,
          permissions JSONB NOT NULL DEFAULT '{}',
          created_at BIGINT NOT NULL DEFAULT FLOOR(EXTRACT(EPOCH FROM NOW()) * 1000),
          updated_at BIGINT NOT NULL DEFAULT FLOOR(EXTRACT(EPOCH FROM NOW()) * 1000)
        );
      `
    })

    if (adminFidsError && !adminFidsError.message.includes('already exists')) {
      console.error('‚ùå Gagal membuat admin_fids:', adminFidsError)
    } else {
      console.log('‚úÖ Tabel admin_fids berhasil dibuat')
    }

    // 3. Create audit_logs table
    console.log('\n3. Membuat tabel audit_logs...')
    const { error: auditLogsError } = await supabaseAdmin.rpc('exec_sql', {
      sql: `
        CREATE TABLE IF NOT EXISTS audit_logs (
          id TEXT PRIMARY KEY DEFAULT (FLOOR(EXTRACT(EPOCH FROM NOW()) * 1000) || '-' || gen_random_uuid()::text),
          admin_fid TEXT NOT NULL,
          action TEXT NOT NULL,
          details JSONB NOT NULL,
          created_at BIGINT NOT NULL DEFAULT FLOOR(EXTRACT(EPOCH FROM NOW()) * 1000)
        );
      `
    })

    if (auditLogsError && !auditLogsError.message.includes('already exists')) {
      console.error('‚ùå Gagal membuat audit_logs:', auditLogsError)
    } else {
      console.log('‚úÖ Tabel audit_logs berhasil dibuat')
    }

    // 4. Insert default data
    console.log('\n4. Memasukkan data default...')
    
    // Insert admin FIDs
    const { error: insertAdminError } = await supabaseAdmin
      .from('admin_fids')
      .upsert([
        {
          fid: '250704',
          permissions: { role: 'admin', permissions: ['all'], source: 'initial' },
          created_at: Date.now(),
          updated_at: Date.now()
        },
        {
          fid: '1107084', 
          permissions: { role: 'admin', permissions: ['all'], source: 'initial' },
          created_at: Date.now(),
          updated_at: Date.now()
        }
      ], { onConflict: 'fid' })

    if (insertAdminError) {
      console.error('‚ùå Gagal insert admin FIDs:', insertAdminError)
    } else {
      console.log('‚úÖ Admin FIDs berhasil dimasukkan')
    }

    // Insert prize config
    const { error: insertPrizeError } = await supabaseAdmin
      .from('prize_configs')
      .upsert({
        config_data: {
          jackpotAmount: '1000',
          firstPlaceAmount: '500',
          secondPlaceAmount: '250', 
          currencyType: 'USD',
          tokenContractAddress: '0x0000000000000000000000000000000000000000'
        },
        updated_at: Date.now(),
        version: 1
      })

    if (insertPrizeError) {
      console.error('‚ùå Gagal insert prize config:', insertPrizeError)
    } else {
      console.log('‚úÖ Prize config berhasil dimasukkan')
    }

    // 5. Create indexes
    console.log('\n5. Membuat indexes...')
    const indexes = [
      'CREATE INDEX IF NOT EXISTS idx_admin_fids_fid ON admin_fids(fid);',
      'CREATE INDEX IF NOT EXISTS idx_audit_logs_admin_fid ON audit_logs(admin_fid);',
      'CREATE INDEX IF NOT EXISTS idx_audit_logs_created_at ON audit_logs(created_at);',
      'CREATE INDEX IF NOT EXISTS idx_audit_logs_action ON audit_logs(action);',
      'CREATE INDEX IF NOT EXISTS idx_prize_configs_version ON prize_configs(version);',
      'CREATE INDEX IF NOT EXISTS idx_prize_configs_updated_at ON prize_configs(updated_at);'
    ]

    for (const indexSql of indexes) {
      try {
        const { error: indexError } = await supabaseAdmin.rpc('exec_sql', { sql: indexSql })
        if (indexError) {
          console.warn(`‚ö†Ô∏è Index warning: ${indexError.message}`)
        }
      } catch (err) {
        console.warn(`‚ö†Ô∏è Index error: ${err.message}`)
      }
    }
    console.log('‚úÖ Indexes selesai dibuat')

    // 6. Enable RLS
    console.log('\n6. Mengaktifkan RLS...')
    const rlsCommands = [
      'ALTER TABLE prize_configs ENABLE ROW LEVEL SECURITY;',
      'ALTER TABLE admin_fids ENABLE ROW LEVEL SECURITY;', 
      'ALTER TABLE audit_logs ENABLE ROW LEVEL SECURITY;'
    ]

    for (const rlsSql of rlsCommands) {
      try {
        const { error: rlsError } = await supabaseAdmin.rpc('exec_sql', { sql: rlsSql })
        if (rlsError) {
          console.warn(`‚ö†Ô∏è RLS warning: ${rlsError.message}`)
        }
      } catch (err) {
        console.warn(`‚ö†Ô∏è RLS error: ${err.message}`)
      }
    }
    console.log('‚úÖ RLS diaktifkan')

    // 7. Test tables
    console.log('\n7. Testing tabel yang baru dibuat...')
    
    const tables = ['prize_configs', 'admin_fids', 'audit_logs']
    for (const table of tables) {
      try {
        const { data, error } = await supabaseAdmin
          .from(table)
          .select('*')
          .limit(1)
        
        if (error) {
          console.error(`‚ùå Table ${table} test failed:`, error.message)
        } else {
          console.log(`‚úÖ Table ${table} test OK`)
        }
      } catch (err) {
        console.error(`‚ùå Table ${table} test exception:`, err.message)
      }
    }

    console.log('\nüéâ Perbaikan tabel selesai!')
    
  } catch (error) {
    console.error('‚ùå Error saat memperbaiki tabel:', error)
    throw error
  }
}

// Alternative approach using direct SQL if RPC doesn't work
async function fixTablesWithDirectSQL() {
  console.log('\nüîÑ Mencoba pendekatan alternatif...')
  
  try {
    // Try using the PostgreSQL direct connection string
    const { Client } = require('pg')
    
    const client = new Client({
      connectionString: 'postgresql://postgres:Sehati200989!@db.masgfwpxfytraiwkvbmg.supabase.co:5432/postgres'
    })
    
    await client.connect()
    console.log('‚úÖ Connected to PostgreSQL directly')
    
    // Create tables one by one
    const createTables = [
      `CREATE TABLE IF NOT EXISTS prize_configs (
        id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        config_data JSONB NOT NULL,
        updated_at BIGINT NOT NULL,
        version BIGINT NOT NULL DEFAULT 1,
        created_at BIGINT DEFAULT FLOOR(EXTRACT(EPOCH FROM NOW()) * 1000)
      );`,
      
      `CREATE TABLE IF NOT EXISTS admin_fids (
        fid TEXT PRIMARY KEY,
        permissions JSONB NOT NULL DEFAULT '{}',
        created_at BIGINT NOT NULL DEFAULT FLOOR(EXTRACT(EPOCH FROM NOW()) * 1000),
        updated_at BIGINT NOT NULL DEFAULT FLOOR(EXTRACT(EPOCH FROM NOW()) * 1000)
      );`,
      
      `CREATE TABLE IF NOT EXISTS audit_logs (
        id TEXT PRIMARY KEY DEFAULT (FLOOR(EXTRACT(EPOCH FROM NOW()) * 1000) || '-' || gen_random_uuid()::text),
        admin_fid TEXT NOT NULL,
        action TEXT NOT NULL,
        details JSONB NOT NULL,
        created_at BIGINT NOT NULL DEFAULT FLOOR(EXTRACT(EPOCH FROM NOW()) * 1000)
      );`
    ]
    
    for (const sql of createTables) {
      try {
        await client.query(sql)
        console.log('‚úÖ Table created successfully')
      } catch (err) {
        console.warn('‚ö†Ô∏è Table creation warning:', err.message)
      }
    }
    
    await client.end()
    console.log('‚úÖ Direct SQL approach completed')
    
  } catch (error) {
    console.error('‚ùå Direct SQL approach failed:', error.message)
  }
}

// Jalankan perbaikan
fixMissingTables()
  .then(() => {
    console.log('\n‚úÖ Proses perbaikan tabel selesai!')
  })
  .catch(async (error) => {
    console.error('\n‚ùå Proses perbaikan gagal, mencoba alternatif...')
    await fixTablesWithDirectSQL()
  })