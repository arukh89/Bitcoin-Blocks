exports.id=839,exports.ids=[839],exports.modules={6007:(e,t,r)=>{"use strict";r.d(t,{ow:()=>a}),r(7885);class s{constructor(){this.errors=[],this.maxErrors=100,this.shouldLogToConsole=!1,this.shouldLogToService="true"===process.env.NEXT_PUBLIC_ERROR_LOGGING}static getInstance(){return s.instance||(s.instance=new s),s.instance}generateErrorId(){return`err_${Date.now()}_${Math.random().toString(36).substr(2,9)}`}getContext(){return{timestamp:Date.now()}}handleGlobalError(e){this.logError(e.message||"Unknown error","system","high",{...this.getContext(),component:"global",additionalData:{filename:e.filename,lineno:e.lineno,colno:e.colno}},e.error)}handleUnhandledRejection(e){this.logError("Unhandled promise rejection","system","high",{...this.getContext(),component:"promise",additionalData:{reason:e.reason}},e.reason)}logError(e,t,r,s={},n){let a=this.generateErrorId(),o={id:a,message:e,category:t,severity:r,context:{timestamp:Date.now(),...this.getContext(),...s},stack:n instanceof Error?n.stack:void 0,originalError:n};this.errors.push(o),this.errors.length>this.maxErrors&&(this.errors=this.errors.slice(-this.maxErrors)),this.shouldLogToConsole&&this.logErrorToConsole(o),this.shouldLogToService&&this.sendToErrorService(o).catch(e=>{console.error("Failed to send error to logging service:",e)});try{let e=JSON.parse(localStorage.getItem("error_logs")||"[]");e.push(o),e.length>50&&e.splice(0,e.length-50),localStorage.setItem("error_logs",JSON.stringify(e))}catch(e){console.warn("Failed to store error in localStorage:",e)}return a}logErrorToConsole(e){let{severity:t,message:r,category:s,context:n,stack:a}=e,o=this.getSeverityEmoji(t);console.group(`${o} [${t.toUpperCase()}] ${s}: ${r}`),console.log("Context:",n),a&&console.log("Stack trace:",a),console.groupEnd()}getSeverityEmoji(e){switch(e){case"low":return"\uD83D\uDFE1";case"medium":return"\uD83D\uDFE0";case"high":return"\uD83D\uDD34";case"critical":return"\uD83D\uDC80";default:return"⚪"}}async sendToErrorService(e){try{let t=await fetch("/api/errors",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!t.ok)throw Error(`HTTP ${t.status}: ${t.statusText}`)}catch(e){console.error("Failed to send error to service:",e)}}getErrors(e){return e?this.errors.slice(-e):[...this.errors]}clearErrors(){this.errors=[]}getErrorStats(){let e={low:0,medium:0,high:0,critical:0};return this.errors.forEach(t=>{e[t.severity]++}),e}}let n=s.getInstance(),a=(e,t,r)=>n.logError(e,"system","medium",t,r)},7002:()=>{},7677:(e,t,r)=>{"use strict";r.d(t,{E2:()=>a,ND:()=>n});var s=r(3939);console.log("\uD83D\uDD0D DEBUG - Supabase Client Initialization:",{runtime:"server",nodeEnv:"production",nextRuntime:"nodejs",supabaseUrl:"configured",hasAnonKey:!0,timestamp:new Date().toISOString()});let n=(0,s.createClient)("https://masgfwpxfytraiwkvbmg.supabase.co","eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1hc2dmd3B4Znl0cmFpd2t2Ym1nIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjA2OTQ5NTYsImV4cCI6MjA3NjI3MDk1Nn0.QAVE2pVMR869KycgzXe2MaQyJTyQb-yZM5zfIbtsMDM",{db:{schema:"public"},realtime:{params:{eventsPerSecond:10,reconnectDelay:2e3,maxReconnectAttempts:10,heartbeatIntervalMs:3e4,wsCloseTimeout:5e3}},auth:{persistSession:!0,autoRefreshToken:!0,detectSessionInUrl:!1,debug:!1,flowType:"pkce"},global:{headers:{"x-application-name":"bitcoin-blocks-miniapp","x-application-version":"1.0.0","x-client-type":"web","x-content-type-options":"nosniff","x-frame-options":"DENY","x-xss-protection":"1; mode=block"}}}),a=(0,s.createClient)("https://masgfwpxfytraiwkvbmg.supabase.co",process.env.SUPABASE_SERVICE_ROLE_KEY,{auth:{autoRefreshToken:!1,persistSession:!1,debug:!1},db:{schema:"public"},global:{headers:{"x-application-name":"bitcoin-blocks-miniapp-admin","x-application-version":"1.0.0","x-client-type":"admin","x-privilege-level":"service-role"}}});async function o(){try{let{data:e,error:t}=await n.from("rounds").select("id").limit(1).single();if(t&&"PGRST116"!==t.code)return console.warn("⚠️ Supabase connection check failed:",t),!1;return!0}catch(e){return console.error("❌ Supabase connection check error:",e),!1}}class i{static getInstance(){return i.instance||(i.instance=new i),i.instance}startMonitoring(){this.checkInterval||(this.checkConnection(),this.checkInterval=setInterval(()=>{this.checkConnection()},this.CHECK_INTERVAL))}stopMonitoring(){this.checkInterval&&(clearInterval(this.checkInterval),this.checkInterval=null)}async checkConnection(){let e=await o();e!==this.isConnected&&(this.isConnected=e,this.notifyListeners(e),e?console.log("✅ Supabase connection restored"):console.warn("⚠️ Supabase connection lost"))}notifyListeners(e){this.listeners.forEach(t=>{try{t(e)}catch(e){console.error("❌ Error in connection listener:",e)}})}addListener(e){this.listeners.push(e)}removeListener(e){let t=this.listeners.indexOf(e);t>-1&&this.listeners.splice(t,1)}getConnectionStatus(){return this.isConnected}constructor(){this.isConnected=!1,this.checkInterval=null,this.CHECK_INTERVAL=3e4,this.listeners=[]}}i.getInstance()},7916:(e,t,r)=>{"use strict";r.d(t,{J:()=>o});var s=r(7677),n=r(6007);class a{static getInstance(){return a.instance||(a.instance=new a),a.instance}async retryQuery(e,t=3,r=1e3){let s=null;for(let n=1;n<=t;n++)try{let a=await Promise.race([e(),new Promise((e,t)=>setTimeout(()=>t(Error("Query timeout")),this.queryTimeout))]);if(a.error&&(s=a.error,n<t)){await new Promise(e=>setTimeout(e,r*n));continue}return a}catch(e){s=e,n<t&&await new Promise(e=>setTimeout(e,r*n))}return{data:null,error:s}}async batchQuery(e){try{return await Promise.allSettled(e.map(e=>this.retryQuery(e))).then(e=>e.map(e=>"fulfilled"===e.status?e.value:{data:null,error:e.reason}))}catch(t){return await (0,n.ow)("Batch query failed",{action:"batch_query",additionalData:{queryCount:e.length}},t),e.map(()=>({data:null,error:t}))}}async getRounds(e=50,t){try{let{data:r,error:a}=await this.retryQuery(async()=>{let r=s.ND.from("rounds").select("*").order("created_at",{ascending:!1}).limit(e);return t&&(r=r.eq("status",t)),await r});if(a)return await (0,n.ow)("Error fetching rounds",{action:"fetch_rounds",additionalData:{limit:e,status:t}},a),[];return this.transformRounds(r||[])}catch(r){return await (0,n.ow)("Unexpected error fetching rounds",{action:"fetch_rounds_unexpected",additionalData:{limit:e,status:t}},r),[]}}async getActiveRound(){try{let{data:e,error:t}=await this.retryQuery(async()=>s.ND.from("rounds").select("*").eq("status","open").single());if(t&&"PGRST116"!==t.code)return await (0,n.ow)("Error fetching active round",{action:"fetch_active_round"},t),null;return e?this.transformRound(e):null}catch(e){return await (0,n.ow)("Unexpected error fetching active round",{action:"fetch_active_round_unexpected"},e),null}}async getRoundsPaginated(e=1,t=20,r){try{let a=(e-1)*t,[o,i]=await Promise.all([this.retryQuery(async()=>{let e=s.ND.from("rounds").select("*").order("created_at",{ascending:!1}).range(a,a+t-1);return r&&(e=e.eq("status",r)),await e}),this.retryQuery(async()=>{let e=s.ND.from("rounds").select("*",{count:"exact",head:!0});return r&&(e=e.eq("status",r)),await e})]);o.error&&await (0,n.ow)("Error fetching paginated rounds",{action:"fetch_rounds_paginated",additionalData:{page:e,limit:t,status:r}},o.error);let c=i.data?.count||0,u=a+t<c;return{rounds:this.transformRounds(o.data||[]),totalCount:c,hasMore:u}}catch(s){return await (0,n.ow)("Unexpected error fetching paginated rounds",{action:"fetch_rounds_paginated_unexpected",additionalData:{page:e,limit:t,status:r}},s),{rounds:[],totalCount:0,hasMore:!1}}}async getRoundsWithStats(e=10){try{let{data:t,error:r}=await this.retryQuery(async()=>s.ND.from("rounds").select(`
            *,
            guesses(count)
          `).order("created_at",{ascending:!1}).limit(e));if(r)return await (0,n.ow)("Error fetching rounds with stats",{action:"fetch_rounds_stats"},r),[];return(t||[]).map(e=>({...this.transformRound(e),participationCount:e.guesses?.[0]?.count||0,averageGuess:0}))}catch(e){return await (0,n.ow)("Unexpected error fetching rounds with stats",{action:"fetch_rounds_stats_unexpected"},e),[]}}async createRound(e){try{let t=Date.now(),{data:r,error:n}=await s.E2.from("rounds").insert({round_number:e.roundNumber,start_time:e.startTime,end_time:e.endTime,prize:e.prize,status:"open",block_number:e.blockNumber,created_at:t,duration:e.duration}).select().single();if(n)return console.error("❌ Error creating round:",n),null;let a=this.transformRound(r);return console.log("✅ Round created successfully:",a),await this.logAction("round_created",`Round #${e.roundNumber} created`,{roundId:a.id,roundNumber:e.roundNumber,prize:e.prize}),a}catch(e){return console.error("❌ Unexpected error creating round:",e),null}}async updateRound(e,t){try{let{data:r,error:n}=await s.E2.from("rounds").update(this.transformRoundToDb(t)).eq("id",e).select().single();if(n)return console.error("❌ Error updating round:",n),null;let a=this.transformRound(r);return console.log("✅ Round updated successfully:",a),a}catch(e){return console.error("❌ Unexpected error updating round:",e),null}}async endRound(e){try{let{error:t}=await s.E2.from("rounds").update({status:"closed"}).eq("id",e);if(t)return console.error("❌ Error ending round:",t),!1;return console.log("✅ Round ended successfully:",e),await this.logAction("round_ended",`Round ${e} ended`,{roundId:e}),!0}catch(e){return console.error("❌ Unexpected error ending round:",e),!1}}async updateRoundResult(e,t,r,n){try{let{error:a}=await s.E2.from("rounds").update({status:"finished",actual_tx_count:t,block_hash:r,winning_fid:n}).eq("id",e);if(a)return console.error("❌ Error updating round result:",a),!1;return console.log("✅ Round result updated successfully:",e),await this.logAction("round_finished",`Round ${e} finished`,{roundId:e,actualTxCount:t,blockHash:r,winningFid:n}),!0}catch(e){return console.error("❌ Unexpected error updating round result:",e),!1}}async getGuessesForRound(e){try{let{data:t,error:r}=await s.ND.from("guesses").select("*").eq("round_id",e).order("created_at",{ascending:!0});if(r)return console.error("❌ Error fetching guesses for round:",r),[];return this.transformGuesses(t||[])}catch(e){return console.error("❌ Unexpected error fetching guesses for round:",e),[]}}async submitGuess(e){try{let t=Date.now(),{data:r,error:n}=await s.ND.from("guesses").insert({round_id:e.roundId,user_fid:e.userFid,guess_amount:e.guessAmount,created_at:t,username:e.username,pfp_url:e.pfpUrl}).select().single();if(n)return console.error("❌ Error submitting guess:",n),null;let a=this.transformGuess(r);return console.log("✅ Guess submitted successfully:",a),await this.logAction("guess_submitted",`${e.username} predicted ${e.guessAmount} transactions`,{roundId:e.roundId,userFid:e.userFid,guessAmount:e.guessAmount}),a}catch(e){return console.error("❌ Unexpected error submitting guess:",e),null}}async hasUserGuessed(e,t){try{let{data:r,error:n}=await s.ND.from("guesses").select("id").eq("round_id",e).eq("user_fid",t).single();if(n&&"PGRST116"!==n.code)return console.error("❌ Error checking if user guessed:",n),!1;return!!r}catch(e){return console.error("❌ Unexpected error checking if user guessed:",e),!1}}async getChatMessages(e=100){try{let{data:t,error:r}=await s.ND.from("chat_messages").select("*").order("created_at",{ascending:!1}).limit(e);if(r)return console.error("❌ Error fetching chat messages:",r),[];return this.transformChatMessages(t||[])}catch(e){return console.error("❌ Unexpected error fetching chat messages:",e),[]}}async addChatMessage(e){try{let t=Date.now(),{data:r,error:n}=await s.ND.from("chat_messages").insert({user_fid:e.userFid,username:e.username,message:e.message,type:e.type,created_at:t,round_id:e.roundId,pfp_url:e.pfpUrl}).select().single();if(n)return console.error("❌ Error adding chat message:",n),null;let a=this.transformChatMessage(r);return console.log("✅ Chat message added successfully:",a),a}catch(e){return console.error("❌ Unexpected error adding chat message:",e),null}}async getPrizeConfiguration(){try{let{data:e,error:t}=await s.ND.from("prize_configs").select("*").order("version",{ascending:!1}).limit(1).single();if(t&&"PGRST116"!==t.code)return console.error("❌ Error fetching prize configuration:",t),null;return e?this.transformPrizeConfig(e):null}catch(e){return console.error("❌ Unexpected error fetching prize configuration:",e),null}}async updatePrizeConfiguration(e){try{let t=Date.now(),{data:r}=await s.ND.from("prize_configs").select("version").order("version",{ascending:!1}).limit(1).single(),n=(r?.version||0)+1,{data:a,error:o}=await s.E2.from("prize_configs").insert({config_data:e,updated_at:t,version:n}).select().single();if(o)return console.error("❌ Error updating prize configuration:",o),null;let i=this.transformPrizeConfig(a);return console.log("✅ Prize configuration updated successfully:",i),await this.logAction("prize_config_updated","Prize configuration updated",e),i}catch(e){return console.error("❌ Unexpected error updating prize configuration:",e),null}}async getLogs(e=100){try{let{data:t,error:r}=await s.E2.from("audit_logs").select("*").order("created_at",{ascending:!1}).limit(e);if(r)return console.error("❌ Error fetching logs:",r),[];return this.transformLogs(t||[])}catch(e){return console.error("❌ Unexpected error fetching logs:",e),[]}}async getLeaderboard(e,t=50){try{if(e){let{data:r,error:a}=await this.retryQuery(async()=>s.ND.from("guesses").select(`
              user_fid,
              username,
              pfp_url,
              guess_amount,
              created_at,
              rounds!inner(actual_tx_count)
            `).eq("round_id",e).not("rounds.actual_tx_count","is",null).order("guess_amount",{ascending:!1}).limit(t));if(a)return await (0,n.ow)("Error fetching round leaderboard",{action:"fetch_leaderboard_round",additionalData:{roundId:e,limit:t}},a),[];let o=r||[],i=o[0]?.rounds?.[0]?.actual_tx_count||0;return o.map((e,t)=>({rank:t+1,userFid:e.user_fid,username:e.username,pfpUrl:e.pfp_url,totalPoints:100*(0===Math.abs(e.guess_amount-i)),correctGuesses:+(0===Math.abs(e.guess_amount-i)),totalParticipation:1,winRate:100*(0===Math.abs(e.guess_amount-i))}))}{let{data:e,error:r}=await this.retryQuery(async()=>s.ND.from("guesses").select(`
              user_fid,
              username,
              pfp_url,
              guess_amount,
              created_at,
              rounds!inner(actual_tx_count, status)
            `).eq("rounds.status","finished").not("rounds.actual_tx_count","is",null).order("created_at",{ascending:!1}));if(r)return await (0,n.ow)("Error fetching overall leaderboard",{action:"fetch_leaderboard_overall",additionalData:{limit:t}},r),[];let a=new Map;return(e||[]).forEach(e=>{let t=e.user_fid,r=0===Math.abs(e.guess_amount-(e.rounds?.[0]?.actual_tx_count||0));a.has(t)||a.set(t,{userFid:t,username:e.username,pfpUrl:e.pfp_url,totalPoints:0,correctGuesses:0,totalParticipation:0});let s=a.get(t);s.totalParticipation++,r&&(s.correctGuesses++,s.totalPoints+=100)}),Array.from(a.values()).map(e=>({...e,winRate:e.totalParticipation>0?Math.round(e.correctGuesses/e.totalParticipation*100):0})).sort((e,t)=>t.totalPoints-e.totalPoints||t.correctGuesses-e.correctGuesses).slice(0,t).map((e,t)=>({...e,rank:t+1}))}}catch(r){return await (0,n.ow)("Unexpected error fetching leaderboard",{action:"fetch_leaderboard_unexpected",additionalData:{roundId:e,limit:t}},r),[]}}async getUserStats(e){try{let{data:t,error:r}=await this.retryQuery(async()=>s.ND.from("guesses").select(`
            guess_amount,
            created_at,
            round_id,
            rounds!inner(actual_tx_count, status)
          `).eq("user_fid",e).eq("rounds.status","finished").not("rounds.actual_tx_count","is",null).order("created_at",{ascending:!1}));if(r)return await (0,n.ow)("Error fetching user stats",{action:"fetch_user_stats",additionalData:{userFid:e}},r),{totalRounds:0,correctGuesses:0,totalWins:0,averageGuess:0,bestGuess:0,recentActivity:[]};let a=t||[],o=a.filter(e=>0===Math.abs(e.guess_amount-(e.rounds?.[0]?.actual_tx_count||0))),i=a.slice(0,10).map(e=>({roundId:e.round_id,guess:e.guess_amount,actual:e.rounds?.[0]?.actual_tx_count||0,isCorrect:0===Math.abs(e.guess_amount-(e.rounds?.[0]?.actual_tx_count||0))}));return{totalRounds:a.length,correctGuesses:o.length,totalWins:o.length,averageGuess:a.length>0?Math.round(a.reduce((e,t)=>e+t.guess_amount,0)/a.length):0,bestGuess:Math.min(...a.map(e=>Math.abs(e.guess_amount-(e.rounds?.[0]?.actual_tx_count||0)))),recentActivity:i}}catch(t){return await (0,n.ow)("Unexpected error fetching user stats",{action:"fetch_user_stats_unexpected",additionalData:{userFid:e}},t),{totalRounds:0,correctGuesses:0,totalWins:0,averageGuess:0,bestGuess:0,recentActivity:[]}}}async getGameStats(){try{let[e,t,r,n]=await Promise.all([this.retryQuery(async()=>await s.ND.from("rounds").select("*",{count:"exact",head:!0})),this.retryQuery(async()=>await s.ND.from("rounds").select("*",{count:"exact",head:!0}).eq("status","open")),this.retryQuery(async()=>await s.ND.from("guesses").select("*",{count:"exact",head:!0})),this.retryQuery(async()=>await s.ND.from("guesses").select("user_fid",{count:"exact",head:!0}))]),a=e.data?.count||0,o=t.data?.count||0,i=r.data?.count||0,c=n.data?.count||0;return{totalRounds:a,activeRounds:o,totalGuesses:i,totalUsers:c,averageParticipation:a>0?Math.round(i/a):0}}catch(e){return await (0,n.ow)("Unexpected error fetching game stats",{action:"fetch_game_stats_unexpected"},e),{totalRounds:0,activeRounds:0,totalGuesses:0,totalUsers:0,averageParticipation:0}}}async logAction(e,t,r){try{let{error:n}=await s.E2.from("audit_logs").insert({admin_fid:"system",action:e,details:{message:t,...r},created_at:Date.now()});n&&console.warn("⚠️ Error logging action:",n)}catch(e){console.warn("⚠️ Unexpected error logging action:",e)}}subscribeToRounds(e){let t=s.ND.channel("rounds_changes").on("postgres_changes",{event:"*",schema:"public",table:"rounds"},t=>{("INSERT"===t.eventType||"UPDATE"===t.eventType)&&e(this.transformRound(t.new))}).subscribe();return()=>{s.ND.removeChannel(t)}}subscribeToGuesses(e){let t=s.ND.channel("guesses_changes").on("postgres_changes",{event:"INSERT",schema:"public",table:"guesses"},t=>{e(this.transformGuess(t.new))}).subscribe();return()=>{s.ND.removeChannel(t)}}subscribeToChatMessages(e){let t=s.ND.channel("chat_messages_changes").on("postgres_changes",{event:"INSERT",schema:"public",table:"chat_messages"},t=>{e(this.transformChatMessage(t.new))}).subscribe();return()=>{s.ND.removeChannel(t)}}subscribeToPrizeConfigs(e){let t=s.ND.channel("prize_configs_changes").on("postgres_changes",{event:"*",schema:"public",table:"prize_configs"},t=>{("INSERT"===t.eventType||"UPDATE"===t.eventType)&&e(this.transformPrizeConfig(t.new))}).subscribe();return()=>{s.ND.removeChannel(t)}}transformRounds(e){return e.map(e=>this.transformRound(e))}transformRound(e){return{id:e.id,roundNumber:e.round_number,startTime:e.start_time,endTime:e.end_time,prize:e.prize,status:e.status,blockNumber:e.block_number,actualTxCount:e.actual_tx_count,winningAddress:e.winning_fid,blockHash:e.block_hash,createdAt:e.created_at,duration:e.duration}}transformRoundToDb(e){let t={};return void 0!==e.roundNumber&&(t.round_number=e.roundNumber),void 0!==e.startTime&&(t.start_time=e.startTime),void 0!==e.endTime&&(t.end_time=e.endTime),void 0!==e.prize&&(t.prize=e.prize),void 0!==e.status&&(t.status=e.status),void 0!==e.blockNumber&&(t.block_number=e.blockNumber),void 0!==e.actualTxCount&&(t.actual_tx_count=e.actualTxCount),void 0!==e.winningAddress&&(t.winning_fid=e.winningAddress),void 0!==e.blockHash&&(t.block_hash=e.blockHash),void 0!==e.createdAt&&(t.created_at=e.createdAt),void 0!==e.duration&&(t.duration=e.duration),t}transformGuesses(e){return e.map(e=>this.transformGuess(e))}transformGuess(e){return{id:e.id,roundId:e.round_id,address:e.user_fid,username:e.username,guess:e.guess_amount,pfpUrl:e.pfp_url,submittedAt:e.created_at}}transformChatMessages(e){return e.map(e=>this.transformChatMessage(e))}transformChatMessage(e){return{id:e.id,roundId:e.round_id,address:e.user_fid,username:e.username,message:e.message,pfpUrl:e.pfp_url,timestamp:e.created_at,type:e.type}}transformPrizeConfig(e){return{id:e.id,jackpotAmount:e.config_data.jackpotAmount,firstPlaceAmount:e.config_data.firstPlaceAmount,secondPlaceAmount:e.config_data.secondPlaceAmount,currencyType:e.config_data.currencyType,tokenContractAddress:e.config_data.tokenContractAddress,updatedAt:e.updated_at}}transformLogs(e){return e.map(e=>this.transformLog(e))}transformLog(e){return{id:e.id,eventType:e.action,details:e.details.message||e.details,timestamp:e.created_at}}constructor(){this.queryTimeout=1e4}}let o=a.getInstance()},8850:()=>{}};